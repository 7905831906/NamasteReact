# package.json is the configuration of the npm.
# There are two types of dependencies-
 1. DEV type dependencies
 2. Normal type dependencies

# DEV Type Dependencies-
  * It is required in a developement phase.
  * When we are developing our app, then we required dev dependencies 

# Normal Dependencies- It is used in production also.

#Caret(^)-It is used to upgrade automtically with minor version.
#Tilde(~)-It is used to upgrade automatically with major version.

#Package.json- it keeps the track of what version of that package installed in your system.(approx version)
-If there is minor version comes, it upgarde the package with it.

#Package-lock.json-It keeps the track of exact version of that package.

#Transitive dependencies- those dependencies have their own dependencies in node modules.

//Parcel-npm install -D Parcel

# It is must to put package.json and package-lock.json in your repository
#If we have package.json and package-lock.json, we can recreate all our node_modules by using command-npm install
that's why we cannot put node_modules files on Github.
#building our app using parcel-npx parcel index_1.html
# npx is used to execute a pacckage-Ex. npx parcel -----

# npx is used to execute a package one time. If we run it again, it will
# download the package again. If we want to use it again and again, we can install it

# React is not preferred to call or use it via https link in script tag but it is preferred to call or install react in 
node_modules which is easier to update the version of react.

#React is used as Normal Dependencies not as developement dependencies.

# what Parcel do-
-Dev build
-Provide/Make Local Server
-HMR = Hot Module Replacement
-File Watching Agorithm- written in C++
-By doing Caching- provide faster builds
-Image Optimization
-Minification of files also
-Bundling of files
-Compressing
-Consistent Hashing
-Code Splitting
-Differential Bundling- to support older browsers
-Diagnostic
-Error Handling is good
-Tree shaking- remove unused code for you
-Different dev and prod bundles

#browserslist-
#npm start = npm run start instead of npm parcel index_2.html

********************************************************************************************
#JSX-is different not a part of react.
#jsx is different then html.
#JSX is not HTML in JavaScript.
#JSX is a syntax extension for JavaScript
#JSX-HTML-like or XML-like syntax

    //JSX-is not HTML in JavaScript-HTML-like or XML-like syntax
    //JSX is transpiled before it reaches the JS Engine which can be understand by browser & React
    //Tranpiling done by Parcel with the help of Babel
    //JSX => React.createElement => React Element-   JS Object => HTMLElement(when render)
    //Babel - convert JSX To React.createElement
    //if we give attributes in jsx that should be in "camelCase".
    $Ex-className="head"

    #if JSX is in single line no need to put in parenthesis.
    #if JSX is in multiple line then we need to put in parenthesis.
    $Ex-const jsxHeading = (<h1 className="head">
    Namaste React using JSX
    </h1>);

    # The above example is the React Element-

    *********************************************************************************************
    #React Element-like heading
    $const heading = (<h1 className="head">
        Namaste React using JSX
        </h1>);
    console.log(heading);

    *********************************************************************************************
    # React Component-

    //Class Based Component-Old way to construct code
    //Function Based Component-New way to construct code
    @Functional component is the normal javascript function which returns the jsx elements.
    
    ********************************************************************************************
    ?? Can we use javascript in functional component
    #const HeadingComponent = () => (
       <div id="container">
       {Between these curly parenthesis we can use any piece of javascriptcode here.}
        <Title/>
         <h1 className="heading">Namaste React Functional Component</h1>
       </div>
    )
    *********************************************************************************************

     ----------------------------Components in an App------------------------------------------------
    # Header-
    -Inside Header-
    @Logo
    @Nav Items
    # Body-
    -Inside Body-
     @Search-
     @Card Container(Restaurant Container)
    #Footer-
    -Inside Footer-
    @Copyright
    @Links
    @Address
    @Contact

   ***************************************************************************************
   Props-are just arguments to javasrcipt functional component. 
***********************************************************************************************
#the Swiggy used config driven UI-ur website is driven by data
#controlling our  UI by config data which are coming from backend





    
